package calendar

import (
    "fmt"
	"strconv"
	v "github.com/anthdm/superkit/validate"
	"gothstack/app/views/components"
	"gothstack/app/views/layouts"
)

templ CalendarEntryCreate(data CalendarEntryPageData) {
	@layouts.BaseLayout() {
		@components.Navigation()
		<div class="container mx-auto mt-10">
			<h2 class="text-center text-2xl font-medium">
				Create Entry for Calendar: { data.Calendar.Name }
			</h2>

			<a href={ templ.SafeURL("/calendars/" + strconv.FormatUint(uint64(data.Calendar.ID), 10)) }class="text-blue-600 hover:underline">← Back to Calendars</a>
			@CalendarEntryForm(data.FormValues, data.FormErrors, data.Calendar, data.WorkResources, data.EntryID)
		</div>
	}
}

// CalendarEntryEdit renders the entry edit page
templ CalendarEntryEdit(data CalendarEntryPageData) {
	@layouts.BaseLayout() {
		@components.Navigation()
		<div class="container mx-auto mt-10">
			<h2 class="text-center text-2xl font-medium">
				Edit Entry for Calendar: { data.Calendar.Name }
			</h2>
			<a href={ templ.SafeURL("/calendars/" + strconv.FormatUint(uint64(data.Calendar.ID), 10)) } class="text-blue-600 hover:underline">← Back to Calendar</a>
			@CalendarEntryForm(data.FormValues, data.FormErrors, data.Calendar, data.WorkResources, data.EntryID)
		</div>
	}
}

// CalendarEntryForm renders the form for creating or editing a calendar entry
templ CalendarEntryForm(values CalendarEntryFormValues, errors v.Errors, calendar Calendar, resources []WorkResource, entryID uint) {
	<div class="mt-6 max-w-lg mx-auto">
		if errors.Has("general") {
			<div class="mb-4 p-4 bg-red-100 border border-red-300 rounded-md">
				<p class="text-center text-red-700">{ errors.Get("general")[0] }</p>
			</div>
		}
		
		<!-- Form URL changes based on whether it's for creation or editing -->
		<form 
			if entryID == 0 {
				hx-post={ string(templ.SafeURL("/calendars/" + strconv.FormatUint(uint64(calendar.ID), 10) + "/entries/create")) }
			} else {
				hx-post={ string(templ.SafeURL("/calendars/" + strconv.FormatUint(uint64(calendar.ID), 10) + "/entry/" + strconv.FormatUint(uint64(entryID), 10) + "/edit")) }
			}
			class="flex flex-col gap-4 p-6 rounded-lg shadow-md"
		>
			<div class="flex flex-col">
				<label for="date" class="font-medium mb-1">Date</label>
				<input { components.InputAttrs(errors.Has("date"))... } data-date-format="DD-MM-YYYY" type="date" name="date" id="date" value={ values.Date } />
				if errors.Has("date") {
					<div class="text-red-500 text-xs mt-1">{ errors.Get("date")[0] }</div>
				}
			</div>
			
			<div class="flex flex-col">
				<label for="text" class="font-medium mb-1">Description</label>
				<input { components.InputAttrs(errors.Has("text"))... } type="text" name="text" id="text" value={ values.Text } placeholder="Entry description" />
				if errors.Has("text") {
					<div class="text-red-500 text-xs mt-1">{ errors.Get("text")[0] }</div>
				}
			</div>
			
			if calendar.Work {
				<div class="flex flex-col">
					<label for="hours" class="font-medium mb-1">Hours</label>
					<input { components.InputAttrs(errors.Has("hours"))... } type="number" name="hours" id="hours" step="0.01" value={ fmt.Sprintf("%.2f", values.Hours) } />
					if errors.Has("hours") {
						<div class="text-red-500 text-xs mt-1">{ errors.Get("hours")[0] }</div>
					}
				</div>
				
				<div class="flex flex-col">
					<label for="resource" class="font-medium mb-1">Work Resource</label>
					<select { components.InputAttrs(errors.Has("resource"))... } name="resource" id="resource">
						<option value="">Select a resource</option>
						for _, resource := range resources {
							<option 
								value={ strconv.FormatUint(uint64(resource.ID), 10) } 
								selected?={ resource.ID == values.WorkResourceID }
							>
								{ resource.Name }
							</option>
						}
					</select>
					if errors.Has("resource") {
						<div class="text-red-500 text-xs mt-1">{ errors.Get("resource")[0] }</div>
					}
				</div>
			}
			
			<div class="flex justify-between mt-4">
				<a 
					href={ templ.SafeURL("/calendars/" + strconv.FormatUint(uint64(calendar.ID), 10)) } 
					class="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-500"
				>
					Cancel
				</a>
				
				<button { components.ButtonAttrs()... }>
					if entryID == 0 {
						Create Entry
					} else {
						Save Changes
					}
				</button>
			</div>
			
			if entryID > 0 {
				<div class="mt-6 border-t pt-4">
					<button 
						hx-delete={ string(templ.SafeURL("/calendars/" + strconv.FormatUint(uint64(calendar.ID), 10) + "/entry/" + strconv.FormatUint(uint64(entryID), 10))) }
						hx-confirm="Are you sure you want to delete this entry? This action cannot be undone."
						class="w-full px-4 py-2 text-white bg-red-600 rounded-md hover:bg-red-700"
					>
						Delete Entry
					</button>
				</div>
			}
		</form>
		
		if values.SuccessMessage != "" {
			<div class="mt-4 p-4 bg-green-100 border border-green-300 rounded-md">
				<p class="text-center text-green-700">{ values.SuccessMessage }</p>
			</div>
		}
	</div>
}